#!/usr/bin/env python

# #############################################################################
# Confirms TCGA download MD5sums given an XML manifest 
# Author: Jeffrey Bhasin <jmb85@case.edu>
# Created: 2013-07-03
#
# Usage:
# See --help option.
# #############################################################################
	
# =============================================================================
# Packages and Globals

import sys
import os
import xml.etree.ElementTree as ET
import argparse
import hashlib

#prefix = ""
#prefix = "/TingA_TCGA/"

# =============================================================================

# =============================================================================
# Local Functions
def checkExists(filepath):
	try:
		with open(filepath): pass
	except IOError:
		return False
	return True

def checkSize(filepath, filesize):
	#print os.path.getsize(filepath)
	if(int(os.path.getsize(filepath)) == int(filesize)):
		return True
	else:
		return False

def checkMD5(filepath, checksum):
	#sum = hashlib.md5(open(filepath, 'rb').read()).hexdigest()
	gotsum = calcMD5(filepath)
	#print sum
	if (gotsum == checksum):
		return True
	else:
		return False

def calcMD5(filepath):
	afile = open(filepath, 'rb')
	hasher = hashlib.md5()
	blocksize=65536
	buf = afile.read(blocksize)
	while len(buf) > 0:
		hasher.update(buf)
		buf = afile.read(blocksize)
	return hasher.hexdigest()

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'

    def disable(self):
        self.HEADER = ''
        self.OKBLUE = ''
        self.OKGREEN = ''
        self.WARNING = ''
        self.FAIL = ''
        self.ENDC = ''
# =============================================================================

# =============================================================================
# Main Code
parser = argparse.ArgumentParser(description="File existence and size are checked for all files indexed in a CGHub manifest XML. Use the --checksum flag to enable MD5 calculation and comparison.", epilog="Output Columns: Exists, Size Matches, Checksum Matches, UUID (folder), File Name")
parser.add_argument('xmlpath', metavar='PATH_TO_XML_MANIFEST', help='Path to XML manifest generated by CGHub browser website.')
parser.add_argument('--prefix', dest='prefix', metavar='PATH_TO_DATA_ROOT', action='store', default="", help='Root path to downloaded data. (default: current working directory)')
parser.add_argument('--checksum', dest='dochecksum', action='store_true', default=False, help='Calculate MD5 checksums for each file and compare to those in the manifest file. (default: off)')
parser.add_argument('--no-color', dest='nocolor', action='store_true', default=False, help='Turn off setting console color. (default: on)')

args = parser.parse_args()

prefix = args.prefix

bcolors = bcolors()
if (args.nocolor):
	bcolors.disable()

tree = ET.parse(args.xmlpath)
root = tree.getroot()
#count = int(root.find('ResultSummary').find('downloadable_file_count').text)
#count = len(root.findall('filename'))
badcount = 0
count = 0
#print "Expecting " + str(count) + " files"

results = root.findall('Result')

#print "Found " + str(len(results)) + " records in manifest"

results = root.findall('Result')

for result in results:
	uuid = result.find('analysis_id').text
	#print uuid
	files = result.find('files').findall('file')

	for f in files:
		count = count + 1
		filename = f.find('filename').text
		filesize = f.find('filesize').text
		checksum = f.find('checksum').text
		filepath = prefix + uuid + "/" + filename

		#print "[UUID: %s]: File Name: %s // Size: %s // Chk: %s" % (uuid, filename, filesize, checksum)

		if (checkExists(filepath) == True):
			flagexist = bcolors.OKGREEN + "PASS" + bcolors.ENDC
			if (checkSize(filepath, filesize) == True):
				flagsize =  bcolors.OKGREEN + "PASS" + bcolors.ENDC
				if (args.dochecksum):
					if (checkMD5(filepath, checksum)):
						flagchk =  bcolors.OKGREEN + "PASS" + bcolors.ENDC
					else:
						flagchk =  bcolors.FAIL + "FAIL" + bcolors.ENDC
						badcount = badcount + 1
				else:
					flagchk = bcolors.WARNING + "SKIP" + bcolors.ENDC
			else:
				flagsize = bcolors.FAIL + "FAIL" + bcolors.ENDC
				badcount = badcount + 1
				flagchk = bcolors.WARNING + "SKIP" + bcolors.ENDC
		else:
			flagexist = bcolors.FAIL + "FAIL" + bcolors.ENDC
			badcount = badcount + 1
			flagsize = bcolors.WARNING + "SKIP" + bcolors.ENDC
			flagchk = bcolors.WARNING + "SKIP" + bcolors.ENDC

		#print "Exists: " + flagexist
		#print "Size: " + flagsize
		#print "Checksum: " + flagchk

		#print "[UUID: %s]: File: %s" % (uuid, filename)
		#print "Exists: " + flagexist + " Size: " + flagsize + " Checksum: " + flagchk

		print "%s\t%s\t%s\t%s\t%s" % (flagexist, flagsize, flagchk, uuid, filename)

# Print summary % for each check
percent = ((float(count)-float(badcount))/float(count))*100
sys.stderr.write("%d of %d files (%.2f%%) were PASS\n" % (count-badcount, count, percent))

# =============================================================================
